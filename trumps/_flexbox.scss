@mixin flexbox-src {


  .layout {
    /**
      * @name flexbox container helpers
      * @description Sets up the flexbox container. Commonly this requires 4 decisions: 1. Flex, or inline flex. 2. flex direction (what's the main axis?) 3. main, and then cross axis aligment. 4. Whether flex items should self-stretch.
      * @section helpers.trumps.flex.containers
      *
      *
      * @markup
      *  <div class="layout-horizontal layout-stretch layout-center layout-center-justified">
      *  </div>
      *  <div class="layout-vertical layout-wrap-reverse layout-justified">
      *  </div>
      */
    // [container] set flexbox and axes
    &-horizontal, &-vertical {
      display: flex !important;
    }
    &-horizontal-inline, &-vertical-inline {
      display: inline-flex !important;
    }
    &-horizontal {
      flex-direction: row;
    }
    &-horizontal-reverse {
      flex-direction: row-reverse;
    }
    &-vertical {
      flex-direction: column;
    }
    &-vertical-reverse {
      flex-direction: column-reverse;
    }
    &-wrap {
      flex-wrap: wrap;
    }
    &-wrap-reverse {
      flex-wrap: wrap-reverse;
    }

    // [container] content alignment
    &-stretch {
      align-content: stretch;
    }

    // [container] alignment in main axis
    &-start-justified {
      -ms-flex-pack: start;
      -webkit-justify-content: flex-start;
      justify-content: flex-start;
    }
    &-center-justified {
      -ms-flex-pack: center;
      -webkit-justify-content: center;
      justify-content: center;
    }
    &-end-justified {
      -ms-flex-pack: end;
      -webkit-justify-content: flex-end;
      justify-content: flex-end;
    }
    &-around-justified {
      -ms-flex-pack: around;
      -webkit-justify-content: space-around;
      justify-content: space-around;
    }
    &-justified {
      -ms-flex-pack: justify;
      -webkit-justify-content: space-between;
      justify-content: space-between;
    }

    // [container] alignment in cross axis
    &-start {
      align-items: flex-start;
    }
    &-center {
      align-items: center;
    }
    &-stretch-items {
      align-items: stretch;
    }
    &-end {
      align-items: flex-end;
    }

    /**
      * @name flexbox item helpers
      * @description Sets up the flexbox items. Commonly this requires 2 decisions: 1. flex item priority. 2. and optional self alignment
      * @section helpers.trumps.flex.items
      *
      *
      * @markup
      *  <div class="layout-horizontal layout-stretch layout-center
       layout-center-justified">
      *    <div class="layout-flex-auto">Flex Item 1
      *    </div>
      *    <div class="layout-flex-auto">Flex Item 2
      *    </div>
      *  </div>
      *  <div class="layout-vertical layout-stretch
       layout-center-justified layout-stretch-items">
      *    <div class="layout-flex-auto">Flex Item 1
      *    </div>
      *    <div class="layout-flex-2">Flex Item 2
      *    </div>
      *    <div class="layout-flex-auto">Flex Item 3
      *    </div>
      *  </div>
      *  <div class="layout-vertical layout-wrap-reverse layout-justified">
      *  </div>
      */
    // [item] flex priority and behavior
    &-flex {
      flex: 1;
    }
    &-flex-auto {
      flex: 1 1 auto;
    }
    &-flex-none {
      flex: none;
    }
    &-flex-one {
      flex: 1;
    }
    &-flex-two {
      flex: 2;
    }
    &-flex-three {
      flex: 3;
    }
    &-flex-four {
      flex: 4;
    }
    &-flex-five {
      flex: 5;
    }
    &-flex-six {
      flex: 6;
    }
    &-flex-seven {
      flex: 7;
    }
    &-flex-eight {
      flex: 8;
    }
    &-flex-nine {
      flex: 9;
    }
    &-flex-ten {
      flex: 10;
    }
    &-flex-eleven {
      flex: 11;
    }
    &-flex-twelve {
      flex: 12;
    }

    // [item] self alignment
    &-self-start {
      align-self: flex-start;
    }
    &-self-center {
      align-self: center;
    }
    &-self-end {
      align-self: flex-end;
    }
    &-self-stretch {
      align-self: stretch;
    }
  }
}
